// Напечатаю в консоль картинку, закрашу "+".

// void PrintImage(int[,] image) // Метод - печатает картинку в консоль плюсами.
// {
//     for (int i = 0; i < image.GetLength(0); i++)
//     {
//         for (int j = 0; j < image.GetLength(1); j++)
//         {
//             if (image[i, j] == 0) Console.Write($" ");
//             else Console.Write($"+");
//         }
//         Console.WriteLine();
//     }
// }

// int[,] pic = new int[,] // Не обязательно указывать количество строк и столбцов, если есть фиксированные данные.
// {
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
//     {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
// };

// void FillImage(int row, int col) // Метод - будет закрашивать мою картинку. 
// // Аргументы позиция строки и столбца пиксиля с которого я начну закрашивать картинку. 
// {
//     if (pic[row, col] == 0) // Если пиксель с позицией строки и столбца равен 0, то я буду его красить.
//     {
//         pic[row, col] = 1; // Крашу пиксель единицей, можно другим числом.
//         // Метод FillImage вызывает сам себя. Тут я определяю правило, что идет за чем.
//         FillImage(row - 1, col); // Поднятся на строчку выше.
//         FillImage(row, col - 1); // Иду в той же строке, но влево.
//         FillImage(row + 1, col); // Иду вниз, т.е. увиличиваю позицию строки.
//         FillImage(row, col + 1); // Иду в право, оставаясь в той же самой строке.
//     }

// }// P.S. Этот алгоритм требует много ресурсов (не красить 4K images)!

// PrintImage(pic);
// FillImage(13, 13); // укажу случайную точку, для старта.
// PrintImage(pic);

// -----------------------------------------------------------------------------------------------------

// Метод - вычисляет факториал числа. Аргумент число, возвращает факториал этого цисла.
// int Factorial (int n) // Для счета не больших чисел.
// {
//     // 1! = 1
//     // 0! = 1
//     if (n == 1) return 1;
//     else return n * Factorial(n - 1);
// }
// Console.WriteLine(Factorial(3)); // 1*2*3 = 6 

// int Factorial (int n) 
// {
//     if (n == 1) return 1;
//     else return n * Factorial(n - 1);
// }
// for (int i = 1; i < 40; i++)
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}"); // Покажет в консоле число и факториал числа.
//     // Видно, ошибку переполнение типа данных int (до 16! считает, 17! ответ отрицательный.)
//     // Можно поменять тип переменной на double.
// }

// double Factorial (int n) // Для счета больших чисел.
// {
//     if (n == 1) return 1;
//     else return n * Factorial(n - 1);
// }
// for (int i = 1; i < 40; i++)
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}"); // Покажет в консоле число и факториал числа.
// }
// ----------------------------------------------------------------------------------------------------

// f(1) = 1
// f(2) = 2
// f(n) = f(n-1) + f(n-2)

// int Fibonacci(int n)
// {
//     if(n == 1 || n == 2) return 1; // Если значение (n = 1) или (n = 2), то возвращаю 1.
//     else return Fibonacci(n-1) + Fibonacci(n-2); // Иначе вернуть Fibonacci(n-1) + Fibonacci(n-2)
// // ВАЖНО! Нужно писать после else return - т.к. мне нужно вернуть значение Fibonacci(n-1) + Fibonacci(n-2).
// }

// for (int i = 1; i < 10; i++) // Так будут считаться первые (10) чисел Фибоначчи.
// {
//     Console.WriteLine(Fibonacci(i));
// }

double Fibonacci(int n)
{
    if(n == 1 || n == 2) return 1; 
    else return Fibonacci(n-1) + Fibonacci(n-2); 
}

for (int i = 1; i < 50; i++) // Так будут считаться первые (40) чисел Фибоначчи.
{
    Console.WriteLine($"f({i}) = {Fibonacci(i)}"); // Покажет в консоле позицию числа и само число Фибоначчи.
}
// Начиная с 40 значения выводятся очень долго.